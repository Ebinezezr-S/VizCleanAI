# app/auth.py
import os
from .db import SessionLocal, User, init_db
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def ensure_db():
    init_db()

def get_user(username: str):
    db = SessionLocal()
    try:
        return db.query(User).filter(User.username == username).first()
    finally:
        db.close()

def create_user(username: str, password: str, role: str = "user", force_reset: bool = False):
    db = SessionLocal()
    try:
        existing = db.query(User).filter(User.username == username).first()
        if existing:
            raise ValueError("User already exists")
        hashed = pwd_context.hash(password)
        user = User(username=username, password_hash=hashed, role=role, force_reset=force_reset)
        db.add(user)
        db.commit()
        db.refresh(user)
        return user
    finally:
        db.close()

def verify_user(username: str, password: str) -> bool:
    user = get_user(username)
    if not user or not user.active:
        return False
    try:
        return pwd_context.verify(password, user.password_hash)
    except Exception:
        return False

def change_password(username: str, new_password: str):
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.username == username).first()
        if not user:
            raise ValueError("No such user")
        user.password_hash = pwd_context.hash(new_password)
        user.force_reset = False
        db.commit()
        return True
    finally:
        db.close()
