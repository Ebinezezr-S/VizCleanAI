# -*- coding: utf-8 -*-
import io
import json
import os

import pandas as pd
from fastapi import FastAPI, File, HTTPException, UploadFile
from pydantic import BaseModel

app = FastAPI(title=\"VizClean API\", version=\"0.1.0\")

# ----------------- Predict API -----------------
class PredictRequest(BaseModel):
    rows: list[dict]

@app.post(\"/predict\")
def predict(data: PredictRequest):
    df = pd.DataFrame(data.rows)

    # --- Cleaning Logic ---
    df = df.drop_duplicates()
    df = df.fillna(method=\"ffill\").fillna(method=\"bfill\")

    numeric_cols = df.select_dtypes(include=\"number\").columns
    for col in numeric_cols:
        mean = df[col].mean()
        std = df[col].std()
        df = df[(df[col] > mean - 3*std) & (df[col] < mean + 3*std)]

    df = df.reset_index(drop=True)

    return {
        \"total_missing_after_cleaning\": int(df.isna().sum().sum()),
        \"cleaned_rows\": df.to_dict(orient=\"records\")
    }

# ----------------- Upload CSV API -----------------
@app.post(\"/upload_csv\")
async def upload_csv(file: UploadFile = File(...)):
    contents = await file.read()
    df = pd.read_csv(io.BytesIO(contents))

    df = df.drop_duplicates()
    df = df.fillna(method=\"ffill\").fillna(method=\"bfill\")

    numeric_cols = df.select_dtypes(include=\"number\").columns
    for col in numeric_cols:
        mean = df[col].mean()
        std = df[col].std()
        df = df[(df[col] > mean - 3*std) & (df[col] < mean + 3*std)]

    df = df.reset_index(drop=True)

    return {
        \"filename\": file.filename,
        \"rows\": len(df),
        \"cleaned_preview\": df.head(10).to_dict(orient=\"records\")
    }

# ----------------- Deploy Info API -----------------
@app.get(\"/deploy_info\")
def deploy_info():
    manifest_path = os.path.join(os.path.dirname(__file__), \"..\", \"deploy\", \"manifest.json\")
    manifest_path = os.path.abspath(manifest_path)

    if not os.path.exists(manifest_path):
        raise HTTPException(status_code=404, detail=\"manifest.json not found. Run deploy_helper.py first.\")

    with open(manifest_path, \"r\", encoding=\"utf-8\") as f:
        manifest = json.load(f)

    return manifest

